<?php namespace Models;use Libs\CObject;class usersModel extends CObject{    static $table = "users";     /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:新增一条记录     */    public function addOne() : array     {        assert(isset($this->openId) && $this->openId != '' );        assert(isset($this->unionid) && $this->unionid != '' );        assert(isset($this->headerImg) && $this->headerImg != '' );        assert(isset($this->nickname) && $this->nickname != '' );        assert(isset($this->username) && $this->username != '' );        assert(isset($this->sex) && is_numeric($this->sex) && $this->sex >= 0);        assert(isset($this->birthday) && $this->birthday != '' );        assert(isset($this->mobile) && $this->mobile != '' );        assert(isset($this->edu) && is_numeric($this->edu) && $this->edu >= 0);        assert(isset($this->email) && $this->email != '' );        assert(isset($this->graduatedSchoole) && $this->graduatedSchoole != '' );        assert(isset($this->profession) && $this->profession != '' );        assert(isset($this->jianliImgs) && $this->jianliImgs != '' );        assert(isset($this->isDeleted) && is_numeric($this->isDeleted) && $this->isDeleted >= 0);        assert(isset($this->addTime) && $this->addTime != '' );        $sql = "INSERT INTO ".self::$table." (`openId`,`unionid`,`headerImg`,`nickname`,`username`,`sex`,`birthday`,`mobile`,`edu`,`email`,`graduatedSchoole`,`profession`,`jianliImgs`,`isDeleted`,`addTime`) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";        $sqlParam = array(            $this->openId,            $this->unionid,            $this->headerImg,            $this->nickname,            $this->username,            $this->sex,            $this->birthday,            $this->mobile,            $this->edu,            $this->email,            $this->graduatedSchoole,            $this->profession,            $this->jianliImgs,            $this->isDeleted,            $this->addTime,);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:删除记录的方法，不进回收站，直接删数据库的记录     */    public function deleteOne() : array     {        $sql = "DELETE FROM ".self::$table." WHERE `id` = ?";        $sqlParam = array($this->id);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据openId获取一条不在回收站内的数据     */    public static function getOneUndeletedByOpenid($openId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND openId = ?  order by id desc limit 0,1";        $sqlParam = array($openId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据openId获取一条在回收站内的数据     */    public static function getOneDeletedByOpenid($openId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND openId = ?  order by id desc limit 0,1";        $sqlParam = array($openId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:IN查询，根据openId获取不在回收站内的数据     */    public static function getAllUndeletedByOpenidUseIn($openIdValues) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND find_in_set (`openId`,'$openIdValues ') order by id desc";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据openId不带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByOpenidWithOutLimit($openId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND openId = ?  order by id desc ";        $sqlParam = array($openId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据openId带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByOpenidWithLimit($openId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND openId = ? order by id desc ".$limit;        $sqlParam = array($openId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据openId不带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByOpenidWithOutLimit($openId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND openId = ? order by id desc ";        $sqlParam = array($openId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据openId带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByOpenidWithLimit($openId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND openId = ? order by id desc ".$limit;        $sqlParam = array($openId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据unionid获取一条不在回收站内的数据     */    public static function getOneUndeletedByUnionid($unionid) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND unionid = ?  order by id desc limit 0,1";        $sqlParam = array($unionid);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据unionid获取一条在回收站内的数据     */    public static function getOneDeletedByUnionid($unionid) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND unionid = ?  order by id desc limit 0,1";        $sqlParam = array($unionid);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:IN查询，根据unionid获取不在回收站内的数据     */    public static function getAllUndeletedByUnionidUseIn($unionidValues) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND find_in_set (`unionid`,'$unionidValues ') order by id desc";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据unionid不带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByUnionidWithOutLimit($unionid) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND unionid = ?  order by id desc ";        $sqlParam = array($unionid);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据unionid带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByUnionidWithLimit($unionid, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND unionid = ? order by id desc ".$limit;        $sqlParam = array($unionid);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据unionid不带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByUnionidWithOutLimit($unionid) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND unionid = ? order by id desc ";        $sqlParam = array($unionid);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据unionid带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByUnionidWithLimit($unionid, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND unionid = ? order by id desc ".$limit;        $sqlParam = array($unionid);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$openId, $unionid获取一条没被删除的数据     */    public static function getOneUndeletedByOpenidAndUnionid($openId, $unionid) : array    {        assert(is_numeric($openId) && $openId > 0);        assert(is_numeric($unionid) && $unionid > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND openId = ? AND unionid = ? order by id desc limit 0,1";        $sqlParam = array($openId, $unionid);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$openId, $unionid获取一条被删除的数据     */    public static function getOneDeletedByOpenidAndUnionid($openId, $unionid) : array    {        assert(is_numeric($openId) && $openId > 0);        assert(is_numeric($unionid) && $unionid > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND openId = ? AND unionid = ? order by id desc limit 0,1";        $sqlParam = array($openId, $unionid);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$openId, $unionid不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByOpenidAndUnionidWithOutLimit($openId, $unionid) : array    {        assert(is_numeric($openId) && $openId > 0);        assert(is_numeric($unionid) && $unionid > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND openId = ? AND unionid = ? order by id desc ";        $sqlParam = array($openId, $unionid);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$openId, $unionid不带limit的获取所有的被删除的数据     */    public static function getAllDeletedByOpenidAndUnionidWithOutLimit($openId, $unionid) : array    {        assert(is_numeric($openId) && $openId > 0);        assert(is_numeric($unionid) && $unionid > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND openId = ? AND unionid = ? order by id desc ";        $sqlParam = array($openId, $unionid);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$openId, $unionid带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByOpenidAndUnionidWithLimit($openId, $unionid, $limit) : array    {        assert(is_numeric($openId) && $openId > 0);        assert(is_numeric($unionid) && $unionid > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND openId = ? AND unionid = ? order by id desc ".$limit;        $sqlParam = array($openId, $unionid);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$openId, $unionid带limit的获取所有的被删除的数据     */    public static function getAllDeletedByOpenidAndUnionidWithLimit($openId, $unionid, $limit) : array    {        assert(is_numeric($openId) && $openId > 0);        assert(is_numeric($unionid) && $unionid > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND openId = ? AND unionid = ? order by id desc ".$limit;        $sqlParam = array($openId, $unionid);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据ID获取一条记录     */    public static function getOneById($id) : array    {        assert(is_numeric($id) && $id > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `id` = ? AND isDeleted = 0";        $sqlParam = array($id);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:IN查询，根据ID获取所有的记录     */    public static function getAllUndeletedByIdUseIn($ids) : array    {        assert($ids != "");        $sql = "SELECT * FROM ".self::$table." WHERE find_in_set(`id`, '$ids') AND isDeleted = 0";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据ID获取一条没被删除的记录     */    public static function getOneByIdForUpdate($id) : array    {        assert(is_numeric($id) && $id > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `id` = ? AND isDeleted = 0 FOR UPDATE";        $sqlParam = array($id);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:删除记录的方法，进回收站，不是直接删数据库的记录     */    public function deleteUpdateOne() : array    {        $sql = "UPDATE ".self::$table." SET `isDeleted` = 1 WHERE `id` = ?";        $sqlParam = array($this->id);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedWithOutLimit() : array    {        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 order by id desc ";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedWithLimit($limit) : array    {        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0  order by id desc ".$limit;        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:不带limit的获取所有的被删除的数据     */    public static function getAllDeletedWithOutLimit() : array    {        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 order by id desc ";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:带limit的获取所有的被删除的数据     */    public static function getAllDeletedWithLimit($limit) : array    {        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 order by id desc ".$limit;        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:编辑一条记录     */    public function editOne() : array    {        assert(isset($this->openId) && $this->openId != '' );        assert(isset($this->unionid) && $this->unionid != '' );        assert(isset($this->headerImg) && $this->headerImg != '' );        assert(isset($this->nickname) && $this->nickname != '' );        assert(isset($this->username) && $this->username != '' );        assert(isset($this->sex) && is_numeric($this->sex) && $this->sex >= 0);        assert(isset($this->birthday) && $this->birthday != '' );        assert(isset($this->mobile) && $this->mobile != '' );        assert(isset($this->edu) && is_numeric($this->edu) && $this->edu >= 0);        assert(isset($this->email) && $this->email != '' );        assert(isset($this->graduatedSchoole) && $this->graduatedSchoole != '' );        assert(isset($this->profession) && $this->profession != '' );        assert(isset($this->jianliImgs) && $this->jianliImgs != '' );        assert(isset($this->isDeleted) && is_numeric($this->isDeleted) && $this->isDeleted >= 0);        $sql = "UPDATE ".self::$table." SET `openId` = ?,`unionid` = ?,`headerImg` = ?,`nickname` = ?,`username` = ?,`sex` = ?,`birthday` = ?,`mobile` = ?,`edu` = ?,`email` = ?,`graduatedSchoole` = ?,`profession` = ?,`jianliImgs` = ?,`isDeleted` = ? WHERE `id` = ? ";        $sqlParam = array(            $this->openId,            $this->unionid,            $this->headerImg,            $this->nickname,            $this->username,            $this->sex,            $this->birthday,            $this->mobile,            $this->edu,            $this->email,            $this->graduatedSchoole,            $this->profession,            $this->jianliImgs,            $this->isDeleted,            $this->id        );        return self::query($sql, $sqlParam, false);    }}