<?php namespace Models;use Libs\CObject;class z5ActivityCardFaceModel extends CObject{    static $table = "z5_activity_card_face";     /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:新增一条记录     */    public function addOne() : int     {        assert(isset($this->activityId) && is_numeric($this->activityId) && $this->activityId >= 0);        assert(isset($this->cardId) && is_numeric($this->cardId) && $this->cardId >= 0);        assert(isset($this->cardFaceName) && $this->cardFaceName != '' );        assert(isset($this->cardFaceImg) && $this->cardFaceImg != '' );        assert(isset($this->probability) && is_numeric($this->probability) && $this->probability >= 0);        assert(isset($this->isJoinNext) && is_numeric($this->isJoinNext) && $this->isJoinNext >= 0);        assert(isset($this->QRCodeId) && is_numeric($this->QRCodeId) && $this->QRCodeId >= 0);        assert(isset($this->addTime) && $this->addTime != '' );        assert(isset($this->isDeleted) && is_numeric($this->isDeleted) && $this->isDeleted >= 0);        $sql = "INSERT INTO ".self::$table." (`activityId`,`cardId`,`cardFaceName`,`cardFaceImg`,`probability`,`isJoinNext`,`QRCodeId`,`addTime`,`isDeleted`) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";        $sqlParam = array(            $this->activityId,            $this->cardId,            $this->cardFaceName,            $this->cardFaceImg,            $this->probability,            $this->isJoinNext,            $this->QRCodeId,            $this->addTime,            $this->isDeleted,);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:删除记录的方法，不进回收站，直接删数据库的记录     */    public function deleteOne() : int     {        $sql = "DELETE FROM ".self::$table." WHERE `id` = ?";        $sqlParam = array($this->id);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据activityId获取一条不在回收站内的数据     */    public static function getOneUndeletedByActivityid($activityId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND activityId = ?  order by id desc limit 0,1";        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据activityId获取一条在回收站内的数据     */    public static function getOneDeletedByActivityid($activityId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND activityId = ?  order by id desc limit 0,1";        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据activityId不带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByActivityidWithOutLimit($activityId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND activityId = ?  order by id desc ";        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据activityId带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByActivityidWithLimit($activityId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND activityId = ? order by id desc ".$limit;        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据activityId不带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByActivityidWithOutLimit($activityId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND activityId = ? order by id desc ";        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据activityId带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByActivityidWithLimit($activityId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND activityId = ? order by id desc ".$limit;        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据cardId获取一条不在回收站内的数据     */    public static function getOneUndeletedByCardid($cardId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND cardId = ?  order by id desc limit 0,1";        $sqlParam = array($cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据cardId获取一条在回收站内的数据     */    public static function getOneDeletedByCardid($cardId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND cardId = ?  order by id desc limit 0,1";        $sqlParam = array($cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据cardId不带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByCardidWithOutLimit($cardId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND cardId = ?  order by id desc ";        $sqlParam = array($cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据cardId带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByCardidWithLimit($cardId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND cardId = ? order by id desc ".$limit;        $sqlParam = array($cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据cardId不带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByCardidWithOutLimit($cardId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND cardId = ? order by id desc ";        $sqlParam = array($cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据cardId带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByCardidWithLimit($cardId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND cardId = ? order by id desc ".$limit;        $sqlParam = array($cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据QRCodeId获取一条不在回收站内的数据     */    public static function getOneUndeletedByQrcodeid($QRCodeId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND QRCodeId = ?  order by id desc limit 0,1";        $sqlParam = array($QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据QRCodeId获取一条在回收站内的数据     */    public static function getOneDeletedByQrcodeid($QRCodeId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND QRCodeId = ?  order by id desc limit 0,1";        $sqlParam = array($QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据QRCodeId不带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByQrcodeidWithOutLimit($QRCodeId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND QRCodeId = ?  order by id desc ";        $sqlParam = array($QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据QRCodeId带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByQrcodeidWithLimit($QRCodeId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND QRCodeId = ? order by id desc ".$limit;        $sqlParam = array($QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据QRCodeId不带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByQrcodeidWithOutLimit($QRCodeId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND QRCodeId = ? order by id desc ";        $sqlParam = array($QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据QRCodeId带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByQrcodeidWithLimit($QRCodeId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND QRCodeId = ? order by id desc ".$limit;        $sqlParam = array($QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $cardId获取一条没被删除的数据     */    public static function getOneUndeletedByActivityidAndCardid($activityId, $cardId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND activityId = ? AND cardId = ? order by id desc limit 0,1";        $sqlParam = array($activityId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $cardId获取一条被删除的数据     */    public static function getOneDeletedByActivityidAndCardid($activityId, $cardId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND activityId = ? AND cardId = ? order by id desc limit 0,1";        $sqlParam = array($activityId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $cardId不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByActivityidAndCardidWithOutLimit($activityId, $cardId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND activityId = ? AND cardId = ? order by id desc ";        $sqlParam = array($activityId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $cardId不带limit的获取所有的被删除的数据     */    public static function getAllDeletedByActivityidAndCardidWithOutLimit($activityId, $cardId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND activityId = ? AND cardId = ? order by id desc ";        $sqlParam = array($activityId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $cardId带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByActivityidAndCardidWithLimit($activityId, $cardId, $limit) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND activityId = ? AND cardId = ? order by id desc ".$limit;        $sqlParam = array($activityId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $cardId带limit的获取所有的被删除的数据     */    public static function getAllDeletedByActivityidAndCardidWithLimit($activityId, $cardId, $limit) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND activityId = ? AND cardId = ? order by id desc ".$limit;        $sqlParam = array($activityId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $QRCodeId获取一条没被删除的数据     */    public static function getOneUndeletedByActivityidAndQrcodeid($activityId, $QRCodeId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND activityId = ? AND QRCodeId = ? order by id desc limit 0,1";        $sqlParam = array($activityId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $QRCodeId获取一条被删除的数据     */    public static function getOneDeletedByActivityidAndQrcodeid($activityId, $QRCodeId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND activityId = ? AND QRCodeId = ? order by id desc limit 0,1";        $sqlParam = array($activityId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $QRCodeId不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByActivityidAndQrcodeidWithOutLimit($activityId, $QRCodeId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND activityId = ? AND QRCodeId = ? order by id desc ";        $sqlParam = array($activityId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $QRCodeId不带limit的获取所有的被删除的数据     */    public static function getAllDeletedByActivityidAndQrcodeidWithOutLimit($activityId, $QRCodeId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND activityId = ? AND QRCodeId = ? order by id desc ";        $sqlParam = array($activityId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $QRCodeId带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByActivityidAndQrcodeidWithLimit($activityId, $QRCodeId, $limit) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND activityId = ? AND QRCodeId = ? order by id desc ".$limit;        $sqlParam = array($activityId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $QRCodeId带limit的获取所有的被删除的数据     */    public static function getAllDeletedByActivityidAndQrcodeidWithLimit($activityId, $QRCodeId, $limit) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND activityId = ? AND QRCodeId = ? order by id desc ".$limit;        $sqlParam = array($activityId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$cardId, $QRCodeId获取一条没被删除的数据     */    public static function getOneUndeletedByCardidAndQrcodeid($cardId, $QRCodeId) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND cardId = ? AND QRCodeId = ? order by id desc limit 0,1";        $sqlParam = array($cardId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$cardId, $QRCodeId获取一条被删除的数据     */    public static function getOneDeletedByCardidAndQrcodeid($cardId, $QRCodeId) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND cardId = ? AND QRCodeId = ? order by id desc limit 0,1";        $sqlParam = array($cardId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$cardId, $QRCodeId不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByCardidAndQrcodeidWithOutLimit($cardId, $QRCodeId) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND cardId = ? AND QRCodeId = ? order by id desc ";        $sqlParam = array($cardId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$cardId, $QRCodeId不带limit的获取所有的被删除的数据     */    public static function getAllDeletedByCardidAndQrcodeidWithOutLimit($cardId, $QRCodeId) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND cardId = ? AND QRCodeId = ? order by id desc ";        $sqlParam = array($cardId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$cardId, $QRCodeId带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByCardidAndQrcodeidWithLimit($cardId, $QRCodeId, $limit) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND cardId = ? AND QRCodeId = ? order by id desc ".$limit;        $sqlParam = array($cardId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$cardId, $QRCodeId带limit的获取所有的被删除的数据     */    public static function getAllDeletedByCardidAndQrcodeidWithLimit($cardId, $QRCodeId, $limit) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND cardId = ? AND QRCodeId = ? order by id desc ".$limit;        $sqlParam = array($cardId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $cardId, $QRCodeId获取一条没被删除的数据     */    public static function getOneUndeletedByActivityidAndCardidAndQrcodeid($activityId, $cardId, $QRCodeId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND activityId = ? AND cardId = ? AND QRCodeId = ? order by id desc limit 0,1";        $sqlParam = array($activityId, $cardId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $cardId, $QRCodeId获取一条被删除的数据     */    public static function getOneDeletedByActivityidAndCardidAndQrcodeid($activityId, $cardId, $QRCodeId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND activityId = ? AND cardId = ? AND QRCodeId = ? order by id desc limit 0,1";        $sqlParam = array($activityId, $cardId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $cardId, $QRCodeId不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByActivityidAndCardidAndQrcodeidWithOutLimit($activityId, $cardId, $QRCodeId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND activityId = ? AND cardId = ? AND QRCodeId = ? order by id desc ";        $sqlParam = array($activityId, $cardId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $cardId, $QRCodeId不带limit的获取所有的被删除的数据     */    public static function getAllDeletedByActivityidAndCardidAndQrcodeidWithOutLimit($activityId, $cardId, $QRCodeId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND activityId = ? AND cardId = ? AND QRCodeId = ? order by id desc ";        $sqlParam = array($activityId, $cardId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $cardId, $QRCodeId带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByActivityidAndCardidAndQrcodeidWithLimit($activityId, $cardId, $QRCodeId, $limit) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND activityId = ? AND cardId = ? AND QRCodeId = ? order by id desc ".$limit;        $sqlParam = array($activityId, $cardId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据$activityId, $cardId, $QRCodeId带limit的获取所有的被删除的数据     */    public static function getAllDeletedByActivityidAndCardidAndQrcodeidWithLimit($activityId, $cardId, $QRCodeId, $limit) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($QRCodeId) && $QRCodeId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND activityId = ? AND cardId = ? AND QRCodeId = ? order by id desc ".$limit;        $sqlParam = array($activityId, $cardId, $QRCodeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据ID获取一条记录     */    public static function getOneById($id) : array    {        assert(is_numeric($id) && $id > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `id` = ? AND isDeleted = 0";        $sqlParam = array($id);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据ID获取一条没被删除的记录     */    public static function getOneByIdForUpdate($id) : array    {        assert(is_numeric($id) && $id > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `id` = ? AND isDeleted = 0 FOR UPDATE";        $sqlParam = array($id);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:删除记录的方法，进回收站，不是直接删数据库的记录     */    public function deleteUpdateOne() : int    {        $sql = "UPDATE ".self::$table." SET `isDeleted` = 1 WHERE `id` = ?";        $sqlParam = array($this->id);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedWithOutLimit() : array    {        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 order by id desc ";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedWithLimit($limit) : array    {        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0  order by id desc ".$limit;        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:不带limit的获取所有的被删除的数据     */    public static function getAllDeletedWithOutLimit() : array    {        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 order by id desc ";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:带limit的获取所有的被删除的数据     */    public static function getAllDeletedWithLimit($limit) : array    {        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 order by id desc ".$limit;        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:编辑一条记录     */    public function editOne() : int    {        assert(isset($this->activityId) && is_numeric($this->activityId) && $this->activityId >= 0);        assert(isset($this->cardId) && is_numeric($this->cardId) && $this->cardId >= 0);        assert(isset($this->cardFaceName) && $this->cardFaceName != '' );        assert(isset($this->cardFaceImg) && $this->cardFaceImg != '' );        assert(isset($this->probability) && is_numeric($this->probability) && $this->probability >= 0);        assert(isset($this->isJoinNext) && is_numeric($this->isJoinNext) && $this->isJoinNext >= 0);        assert(isset($this->QRCodeId) && is_numeric($this->QRCodeId) && $this->QRCodeId >= 0);        assert(isset($this->isDeleted) && is_numeric($this->isDeleted) && $this->isDeleted >= 0);        $sql = "UPDATE ".self::$table." SET `activityId` = ?,`cardId` = ?,`cardFaceName` = ?,`cardFaceImg` = ?,`probability` = ?,`isJoinNext` = ?,`QRCodeId` = ?,`isDeleted` = ? WHERE `id` = ? ";        $sqlParam = array(            $this->activityId,            $this->cardId,            $this->cardFaceName,            $this->cardFaceImg,            $this->probability,            $this->isJoinNext,            $this->QRCodeId,            $this->isDeleted,            $this->id        );        return self::query($sql, $sqlParam, false);    }}