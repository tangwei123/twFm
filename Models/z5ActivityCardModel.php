<?php namespace Models;use Libs\CObject;class z5ActivityCardModel extends CObject{    static $table = "z5_activity_card";     /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:新增一条记录     */    public function addOne() : int     {        assert(isset($this->activityId) && is_numeric($this->activityId) && $this->activityId >= 0);        assert(isset($this->cardName) && $this->cardName != '' );        assert(isset($this->addTime) && $this->addTime != '' );        assert(isset($this->isDeleted) && is_numeric($this->isDeleted) && $this->isDeleted >= 0);        $sql = "INSERT INTO ".self::$table." (`activityId`,`cardName`,`addTime`,`isDeleted`) VALUES ( ?, ?, ?, ?)";        $sqlParam = array(            $this->activityId,            $this->cardName,            $this->addTime,            $this->isDeleted,);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:删除记录的方法，不进回收站，直接删数据库的记录     */    public function deleteOne() : int     {        $sql = "DELETE FROM ".self::$table." WHERE `id` = ?";        $sqlParam = array($this->id);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据activityId获取一条不在回收站内的数据     */    public static function getOneUndeletedByActivityid($activityId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND activityId = ?  order by id desc limit 0,1";        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据activityId获取一条在回收站内的数据     */    public static function getOneDeletedByActivityid($activityId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND activityId = ?  order by id desc limit 0,1";        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据activityId不带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByActivityidWithOutLimit($activityId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND activityId = ?  order by id desc ";        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据activityId带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByActivityidWithLimit($activityId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND activityId = ? order by id desc ".$limit;        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据activityId不带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByActivityidWithOutLimit($activityId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND activityId = ? order by id desc ";        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据activityId带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByActivityidWithLimit($activityId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND activityId = ? order by id desc ".$limit;        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据ID获取一条记录     */    public static function getOneById($id) : array    {        assert(is_numeric($id) && $id > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `id` = ? AND isDeleted = 0";        $sqlParam = array($id);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:根据ID获取一条没被删除的记录     */    public static function getOneByIdForUpdate($id) : array    {        assert(is_numeric($id) && $id > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `id` = ? AND isDeleted = 0 FOR UPDATE";        $sqlParam = array($id);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:删除记录的方法，进回收站，不是直接删数据库的记录     */    public function deleteUpdateOne() : int    {        $sql = "UPDATE ".self::$table." SET `isDeleted` = 1 WHERE `id` = ?";        $sqlParam = array($this->id);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedWithOutLimit() : array    {        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 order by id desc ";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedWithLimit($limit) : array    {        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0  order by id desc ".$limit;        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:不带limit的获取所有的被删除的数据     */    public static function getAllDeletedWithOutLimit() : array    {        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 order by id desc ";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:带limit的获取所有的被删除的数据     */    public static function getAllDeletedWithLimit($limit) : array    {        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 order by id desc ".$limit;        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.25     * @param      * @return     * Function:编辑一条记录     */    public function editOne() : int    {        assert(isset($this->activityId) && is_numeric($this->activityId) && $this->activityId >= 0);        assert(isset($this->cardName) && $this->cardName != '' );        assert(isset($this->isDeleted) && is_numeric($this->isDeleted) && $this->isDeleted >= 0);        $sql = "UPDATE ".self::$table." SET `activityId` = ?,`cardName` = ?,`isDeleted` = ? WHERE `id` = ? ";        $sqlParam = array(            $this->activityId,            $this->cardName,            $this->isDeleted,            $this->id        );        return self::query($sql, $sqlParam, false);    }}