<?php namespace Models;use Libs\CObject;class z5UserHasCardFaceModel extends CObject{    static $table = "z5_user_has_card_face";     /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:新增一条记录     */    public function addOne() : array     {        assert(isset($this->userId) && is_numeric($this->userId) && $this->userId >= 0);        assert(isset($this->activityId) && is_numeric($this->activityId) && $this->activityId >= 0);        assert(isset($this->cardId) && is_numeric($this->cardId) && $this->cardId >= 0);        assert(isset($this->cardFaceId) && is_numeric($this->cardFaceId) && $this->cardFaceId >= 0);        assert(isset($this->isShared) && is_numeric($this->isShared) && $this->isShared >= 0);        assert(isset($this->isFromShared) && is_numeric($this->isFromShared) && $this->isFromShared >= 0);        assert(isset($this->fromId) && is_numeric($this->fromId) && $this->fromId >= 0);        assert(isset($this->fromWhichQRCode) && is_numeric($this->fromWhichQRCode) && $this->fromWhichQRCode >= 0);        assert(isset($this->addTime) && $this->addTime != '' );        $sql = "INSERT INTO ".self::$table." (`userId`,`activityId`,`cardId`,`cardFaceId`,`isShared`,`isFromShared`,`fromId`,`fromWhichQRCode`,`addTime`) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";        $sqlParam = array(            $this->userId,            $this->activityId,            $this->cardId,            $this->cardFaceId,            $this->isShared,            $this->isFromShared,            $this->fromId,            $this->fromWhichQRCode,            $this->addTime,);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:删除记录的方法，不进回收站，直接删数据库的记录     */    public function deleteOne() : array     {        $sql = "DELETE FROM ".self::$table." WHERE `id` = ?";        $sqlParam = array($this->id);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据userId不带分页获取所有的数据     */    public static function getAllByUseridWithOutLimit($userId) : array    {        $sql = " SELECT * from ".self::$table." WHERE userId = ? order by id desc ";        $sqlParam = array($userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据userId带分页获取所有的数据     */    public static function getAllByUseridWithLimit($userId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE userId = ? order by id desc ".$limit;        $sqlParam = array($userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据userId获取一条数据     */    public static function getOneByUserid($userId) : array    {        $sql = " SELECT * from ".self::$table." WHERE userId = ?  order by id desc limit 0,1";        $sqlParam = array($userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据activityId不带分页获取所有的数据     */    public static function getAllByActivityidWithOutLimit($activityId) : array    {        $sql = " SELECT * from ".self::$table." WHERE activityId = ? order by id desc ";        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据activityId带分页获取所有的数据     */    public static function getAllByActivityidWithLimit($activityId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE activityId = ? order by id desc ".$limit;        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据activityId获取一条数据     */    public static function getOneByActivityid($activityId) : array    {        $sql = " SELECT * from ".self::$table." WHERE activityId = ?  order by id desc limit 0,1";        $sqlParam = array($activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据cardId不带分页获取所有的数据     */    public static function getAllByCardidWithOutLimit($cardId) : array    {        $sql = " SELECT * from ".self::$table." WHERE cardId = ? order by id desc ";        $sqlParam = array($cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据cardId带分页获取所有的数据     */    public static function getAllByCardidWithLimit($cardId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE cardId = ? order by id desc ".$limit;        $sqlParam = array($cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据cardId获取一条数据     */    public static function getOneByCardid($cardId) : array    {        $sql = " SELECT * from ".self::$table." WHERE cardId = ?  order by id desc limit 0,1";        $sqlParam = array($cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据cardFaceId不带分页获取所有的数据     */    public static function getAllByCardfaceidWithOutLimit($cardFaceId) : array    {        $sql = " SELECT * from ".self::$table." WHERE cardFaceId = ? order by id desc ";        $sqlParam = array($cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据cardFaceId带分页获取所有的数据     */    public static function getAllByCardfaceidWithLimit($cardFaceId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE cardFaceId = ? order by id desc ".$limit;        $sqlParam = array($cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据cardFaceId获取一条数据     */    public static function getOneByCardfaceid($cardFaceId) : array    {        $sql = " SELECT * from ".self::$table." WHERE cardFaceId = ?  order by id desc limit 0,1";        $sqlParam = array($cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据fromId不带分页获取所有的数据     */    public static function getAllByFromidWithOutLimit($fromId) : array    {        $sql = " SELECT * from ".self::$table." WHERE fromId = ? order by id desc ";        $sqlParam = array($fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据fromId带分页获取所有的数据     */    public static function getAllByFromidWithLimit($fromId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE fromId = ? order by id desc ".$limit;        $sqlParam = array($fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据fromId获取一条数据     */    public static function getOneByFromid($fromId) : array    {        $sql = " SELECT * from ".self::$table." WHERE fromId = ?  order by id desc limit 0,1";        $sqlParam = array($fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndActivityidWithOutLimit($userId, $activityId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? order by id desc ";        $sqlParam = array($userId, $activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndActivityidWithLimit($userId, $activityId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? order by id desc ".$limit;        $sqlParam = array($userId, $activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId获取一条数据     */    public static function getOneByUseridAndActivityid($userId, $activityId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $activityId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndCardidWithOutLimit($userId, $cardId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardId) && $cardId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardId = ? order by id desc ";        $sqlParam = array($userId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndCardidWithLimit($userId, $cardId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardId = ? order by id desc ".$limit;        $sqlParam = array($userId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardId获取一条数据     */    public static function getOneByUseridAndCardid($userId, $cardId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardId) && $cardId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardFaceId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndCardfaceidWithOutLimit($userId, $cardFaceId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardFaceId = ? order by id desc ";        $sqlParam = array($userId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardFaceId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndCardfaceidWithLimit($userId, $cardFaceId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardFaceId = ? order by id desc ".$limit;        $sqlParam = array($userId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardFaceId获取一条数据     */    public static function getOneByUseridAndCardfaceid($userId, $cardFaceId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardFaceId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndFromidWithOutLimit($userId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND fromId = ? order by id desc ";        $sqlParam = array($userId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndFromidWithLimit($userId, $fromId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($userId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $fromId获取一条数据     */    public static function getOneByUseridAndFromid($userId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardId不带limit的获取所有的没被删除的数据     */    public static function getAllByActivityidAndCardidWithOutLimit($activityId, $cardId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardId = ? order by id desc ";        $sqlParam = array($activityId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardId不带limit的获取所有的被删除的数据     */    public static function getAllByActivityidAndCardidWithLimit($activityId, $cardId, $limit) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardId = ? order by id desc ".$limit;        $sqlParam = array($activityId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardId获取一条数据     */    public static function getOneByActivityidAndCardid($activityId, $cardId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardId = ? order by id desc limit 0,1";        $sqlParam = array($activityId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardFaceId不带limit的获取所有的没被删除的数据     */    public static function getAllByActivityidAndCardfaceidWithOutLimit($activityId, $cardFaceId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardFaceId = ? order by id desc ";        $sqlParam = array($activityId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardFaceId不带limit的获取所有的被删除的数据     */    public static function getAllByActivityidAndCardfaceidWithLimit($activityId, $cardFaceId, $limit) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardFaceId = ? order by id desc ".$limit;        $sqlParam = array($activityId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardFaceId获取一条数据     */    public static function getOneByActivityidAndCardfaceid($activityId, $cardFaceId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardFaceId = ? order by id desc limit 0,1";        $sqlParam = array($activityId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByActivityidAndFromidWithOutLimit($activityId, $fromId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND fromId = ? order by id desc ";        $sqlParam = array($activityId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByActivityidAndFromidWithLimit($activityId, $fromId, $limit) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($activityId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $fromId获取一条数据     */    public static function getOneByActivityidAndFromid($activityId, $fromId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($activityId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$cardId, $cardFaceId不带limit的获取所有的没被删除的数据     */    public static function getAllByCardidAndCardfaceidWithOutLimit($cardId, $cardFaceId) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE cardId = ? AND cardFaceId = ? order by id desc ";        $sqlParam = array($cardId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$cardId, $cardFaceId不带limit的获取所有的被删除的数据     */    public static function getAllByCardidAndCardfaceidWithLimit($cardId, $cardFaceId, $limit) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE cardId = ? AND cardFaceId = ? order by id desc ".$limit;        $sqlParam = array($cardId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$cardId, $cardFaceId获取一条数据     */    public static function getOneByCardidAndCardfaceid($cardId, $cardFaceId) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE cardId = ? AND cardFaceId = ? order by id desc limit 0,1";        $sqlParam = array($cardId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$cardId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByCardidAndFromidWithOutLimit($cardId, $fromId) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE cardId = ? AND fromId = ? order by id desc ";        $sqlParam = array($cardId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$cardId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByCardidAndFromidWithLimit($cardId, $fromId, $limit) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE cardId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($cardId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$cardId, $fromId获取一条数据     */    public static function getOneByCardidAndFromid($cardId, $fromId) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE cardId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($cardId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$cardFaceId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByCardfaceidAndFromidWithOutLimit($cardFaceId, $fromId) : array    {        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE cardFaceId = ? AND fromId = ? order by id desc ";        $sqlParam = array($cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$cardFaceId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByCardfaceidAndFromidWithLimit($cardFaceId, $fromId, $limit) : array    {        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE cardFaceId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$cardFaceId, $fromId获取一条数据     */    public static function getOneByCardfaceidAndFromid($cardFaceId, $fromId) : array    {        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE cardFaceId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndActivityidAndCardidWithOutLimit($userId, $activityId, $cardId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardId = ? order by id desc ";        $sqlParam = array($userId, $activityId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndActivityidAndCardidWithLimit($userId, $activityId, $cardId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardId = ? order by id desc ".$limit;        $sqlParam = array($userId, $activityId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardId获取一条数据     */    public static function getOneByUseridAndActivityidAndCardid($userId, $activityId, $cardId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $activityId, $cardId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardFaceId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndActivityidAndCardfaceidWithOutLimit($userId, $activityId, $cardFaceId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardFaceId = ? order by id desc ";        $sqlParam = array($userId, $activityId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardFaceId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndActivityidAndCardfaceidWithLimit($userId, $activityId, $cardFaceId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardFaceId = ? order by id desc ".$limit;        $sqlParam = array($userId, $activityId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardFaceId获取一条数据     */    public static function getOneByUseridAndActivityidAndCardfaceid($userId, $activityId, $cardFaceId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardFaceId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $activityId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndActivityidAndFromidWithOutLimit($userId, $activityId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND fromId = ? order by id desc ";        $sqlParam = array($userId, $activityId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndActivityidAndFromidWithLimit($userId, $activityId, $fromId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($userId, $activityId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $fromId获取一条数据     */    public static function getOneByUseridAndActivityidAndFromid($userId, $activityId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $activityId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardId, $cardFaceId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndCardidAndCardfaceidWithOutLimit($userId, $cardId, $cardFaceId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardId = ? AND cardFaceId = ? order by id desc ";        $sqlParam = array($userId, $cardId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardId, $cardFaceId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndCardidAndCardfaceidWithLimit($userId, $cardId, $cardFaceId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardId = ? AND cardFaceId = ? order by id desc ".$limit;        $sqlParam = array($userId, $cardId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardId, $cardFaceId获取一条数据     */    public static function getOneByUseridAndCardidAndCardfaceid($userId, $cardId, $cardFaceId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardId = ? AND cardFaceId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $cardId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndCardidAndFromidWithOutLimit($userId, $cardId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardId = ? AND fromId = ? order by id desc ";        $sqlParam = array($userId, $cardId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndCardidAndFromidWithLimit($userId, $cardId, $fromId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($userId, $cardId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardId, $fromId获取一条数据     */    public static function getOneByUseridAndCardidAndFromid($userId, $cardId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $cardId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardFaceId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndCardfaceidAndFromidWithOutLimit($userId, $cardFaceId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardFaceId = ? AND fromId = ? order by id desc ";        $sqlParam = array($userId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardFaceId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndCardfaceidAndFromidWithLimit($userId, $cardFaceId, $fromId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardFaceId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($userId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardFaceId, $fromId获取一条数据     */    public static function getOneByUseridAndCardfaceidAndFromid($userId, $cardFaceId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardFaceId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardId, $cardFaceId不带limit的获取所有的没被删除的数据     */    public static function getAllByActivityidAndCardidAndCardfaceidWithOutLimit($activityId, $cardId, $cardFaceId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardId = ? AND cardFaceId = ? order by id desc ";        $sqlParam = array($activityId, $cardId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardId, $cardFaceId不带limit的获取所有的被删除的数据     */    public static function getAllByActivityidAndCardidAndCardfaceidWithLimit($activityId, $cardId, $cardFaceId, $limit) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardId = ? AND cardFaceId = ? order by id desc ".$limit;        $sqlParam = array($activityId, $cardId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardId, $cardFaceId获取一条数据     */    public static function getOneByActivityidAndCardidAndCardfaceid($activityId, $cardId, $cardFaceId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardId = ? AND cardFaceId = ? order by id desc limit 0,1";        $sqlParam = array($activityId, $cardId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByActivityidAndCardidAndFromidWithOutLimit($activityId, $cardId, $fromId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardId = ? AND fromId = ? order by id desc ";        $sqlParam = array($activityId, $cardId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByActivityidAndCardidAndFromidWithLimit($activityId, $cardId, $fromId, $limit) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($activityId, $cardId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardId, $fromId获取一条数据     */    public static function getOneByActivityidAndCardidAndFromid($activityId, $cardId, $fromId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($activityId, $cardId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardFaceId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByActivityidAndCardfaceidAndFromidWithOutLimit($activityId, $cardFaceId, $fromId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardFaceId = ? AND fromId = ? order by id desc ";        $sqlParam = array($activityId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardFaceId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByActivityidAndCardfaceidAndFromidWithLimit($activityId, $cardFaceId, $fromId, $limit) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardFaceId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($activityId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardFaceId, $fromId获取一条数据     */    public static function getOneByActivityidAndCardfaceidAndFromid($activityId, $cardFaceId, $fromId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardFaceId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($activityId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$cardId, $cardFaceId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByCardidAndCardfaceidAndFromidWithOutLimit($cardId, $cardFaceId, $fromId) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE cardId = ? AND cardFaceId = ? AND fromId = ? order by id desc ";        $sqlParam = array($cardId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$cardId, $cardFaceId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByCardidAndCardfaceidAndFromidWithLimit($cardId, $cardFaceId, $fromId, $limit) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE cardId = ? AND cardFaceId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($cardId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$cardId, $cardFaceId, $fromId获取一条数据     */    public static function getOneByCardidAndCardfaceidAndFromid($cardId, $cardFaceId, $fromId) : array    {        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE cardId = ? AND cardFaceId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($cardId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardId, $cardFaceId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndActivityidAndCardidAndCardfaceidWithOutLimit($userId, $activityId, $cardId, $cardFaceId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardId = ? AND cardFaceId = ? order by id desc ";        $sqlParam = array($userId, $activityId, $cardId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardId, $cardFaceId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndActivityidAndCardidAndCardfaceidWithLimit($userId, $activityId, $cardId, $cardFaceId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardId = ? AND cardFaceId = ? order by id desc ".$limit;        $sqlParam = array($userId, $activityId, $cardId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardId, $cardFaceId获取一条数据     */    public static function getOneByUseridAndActivityidAndCardidAndCardfaceid($userId, $activityId, $cardId, $cardFaceId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardId = ? AND cardFaceId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $activityId, $cardId, $cardFaceId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndActivityidAndCardidAndFromidWithOutLimit($userId, $activityId, $cardId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardId = ? AND fromId = ? order by id desc ";        $sqlParam = array($userId, $activityId, $cardId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndActivityidAndCardidAndFromidWithLimit($userId, $activityId, $cardId, $fromId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($userId, $activityId, $cardId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardId, $fromId获取一条数据     */    public static function getOneByUseridAndActivityidAndCardidAndFromid($userId, $activityId, $cardId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $activityId, $cardId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardFaceId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndActivityidAndCardfaceidAndFromidWithOutLimit($userId, $activityId, $cardFaceId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardFaceId = ? AND fromId = ? order by id desc ";        $sqlParam = array($userId, $activityId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardFaceId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndActivityidAndCardfaceidAndFromidWithLimit($userId, $activityId, $cardFaceId, $fromId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardFaceId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($userId, $activityId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardFaceId, $fromId获取一条数据     */    public static function getOneByUseridAndActivityidAndCardfaceidAndFromid($userId, $activityId, $cardFaceId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardFaceId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $activityId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardId, $cardFaceId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndCardidAndCardfaceidAndFromidWithOutLimit($userId, $cardId, $cardFaceId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardId = ? AND cardFaceId = ? AND fromId = ? order by id desc ";        $sqlParam = array($userId, $cardId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardId, $cardFaceId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndCardidAndCardfaceidAndFromidWithLimit($userId, $cardId, $cardFaceId, $fromId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardId = ? AND cardFaceId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($userId, $cardId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $cardId, $cardFaceId, $fromId获取一条数据     */    public static function getOneByUseridAndCardidAndCardfaceidAndFromid($userId, $cardId, $cardFaceId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND cardId = ? AND cardFaceId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $cardId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardId, $cardFaceId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByActivityidAndCardidAndCardfaceidAndFromidWithOutLimit($activityId, $cardId, $cardFaceId, $fromId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardId = ? AND cardFaceId = ? AND fromId = ? order by id desc ";        $sqlParam = array($activityId, $cardId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardId, $cardFaceId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByActivityidAndCardidAndCardfaceidAndFromidWithLimit($activityId, $cardId, $cardFaceId, $fromId, $limit) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardId = ? AND cardFaceId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($activityId, $cardId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$activityId, $cardId, $cardFaceId, $fromId获取一条数据     */    public static function getOneByActivityidAndCardidAndCardfaceidAndFromid($activityId, $cardId, $cardFaceId, $fromId) : array    {        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE activityId = ? AND cardId = ? AND cardFaceId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($activityId, $cardId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardId, $cardFaceId, $fromId不带limit的获取所有的没被删除的数据     */    public static function getAllByUseridAndActivityidAndCardidAndCardfaceidAndFromidWithOutLimit($userId, $activityId, $cardId, $cardFaceId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardId = ? AND cardFaceId = ? AND fromId = ? order by id desc ";        $sqlParam = array($userId, $activityId, $cardId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardId, $cardFaceId, $fromId不带limit的获取所有的被删除的数据     */    public static function getAllByUseridAndActivityidAndCardidAndCardfaceidAndFromidWithLimit($userId, $activityId, $cardId, $cardFaceId, $fromId, $limit) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardId = ? AND cardFaceId = ? AND fromId = ? order by id desc ".$limit;        $sqlParam = array($userId, $activityId, $cardId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据$userId, $activityId, $cardId, $cardFaceId, $fromId获取一条数据     */    public static function getOneByUseridAndActivityidAndCardidAndCardfaceidAndFromid($userId, $activityId, $cardId, $cardFaceId, $fromId) : array    {        assert(is_numeric($userId) && $userId > 0);        assert(is_numeric($activityId) && $activityId > 0);        assert(is_numeric($cardId) && $cardId > 0);        assert(is_numeric($cardFaceId) && $cardFaceId > 0);        assert(is_numeric($fromId) && $fromId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE userId = ? AND activityId = ? AND cardId = ? AND cardFaceId = ? AND fromId = ? order by id desc limit 0,1";        $sqlParam = array($userId, $activityId, $cardId, $cardFaceId, $fromId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据ID获取一条记录     */    public static function getOneById($id) : array    {        assert(is_numeric($id) && $id > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `id` = ?";        $sqlParam = array($id);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:根据ID获取一条记录     */    public static function getOneByIdForUpdate($id) : array    {        assert(is_numeric($id) && $id > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `id` = ? FOR UPDATE";        $sqlParam = array($id);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:不带limit的获取所有的数据     */    public static function getAllWithOutLimit() : array    {        $sql = "SELECT * FROM ".self::$table." order by id desc ";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param $limit     * @return     * Function:带limit获取所有的记录     */    public static function getAllWithLimit($limit) : array    {        assert($limit != "");        $sql = "SELECT * from ".self::$table." order by id desc ".$limit;        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.02.28     * @param      * @return     * Function:编辑一条记录     */    public function editOne() : array    {        assert(isset($this->userId) && is_numeric($this->userId) && $this->userId >= 0);        assert(isset($this->activityId) && is_numeric($this->activityId) && $this->activityId >= 0);        assert(isset($this->cardId) && is_numeric($this->cardId) && $this->cardId >= 0);        assert(isset($this->cardFaceId) && is_numeric($this->cardFaceId) && $this->cardFaceId >= 0);        assert(isset($this->isShared) && is_numeric($this->isShared) && $this->isShared >= 0);        assert(isset($this->isFromShared) && is_numeric($this->isFromShared) && $this->isFromShared >= 0);        assert(isset($this->fromId) && is_numeric($this->fromId) && $this->fromId >= 0);        assert(isset($this->fromWhichQRCode) && is_numeric($this->fromWhichQRCode) && $this->fromWhichQRCode >= 0);        $sql = "UPDATE ".self::$table." SET `userId` = ?,`activityId` = ?,`cardId` = ?,`cardFaceId` = ?,`isShared` = ?,`isFromShared` = ?,`fromId` = ?,`fromWhichQRCode` = ? WHERE `id` = ? ";        $sqlParam = array(            $this->userId,            $this->activityId,            $this->cardId,            $this->cardFaceId,            $this->isShared,            $this->isFromShared,            $this->fromId,            $this->fromWhichQRCode,            $this->id        );        return self::query($sql, $sqlParam, false);    }}