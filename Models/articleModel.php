<?php namespace Models;use Libs\CObject;class articleModel extends CObject{    static $table = "article";     /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:新增一条记录     */    public function addOne() : array     {        assert(isset($this->articleCatId) && is_numeric($this->articleCatId) && $this->articleCatId >= 0);        assert(isset($this->title) && $this->title != '' );        assert(isset($this->desc) && $this->desc != '' );        assert(isset($this->indexImg) && $this->indexImg != '' );        assert(isset($this->content) && $this->content != '' );        assert(isset($this->addTime) && $this->addTime != '' );        assert(isset($this->sort) && is_numeric($this->sort) && $this->sort >= 0);        assert(isset($this->isDeleted) && is_numeric($this->isDeleted) && $this->isDeleted >= 0);        $sql = "INSERT INTO ".self::$table." (`articleCatId`,`title`,`desc`,`indexImg`,`content`,`addTime`,`sort`,`isDeleted`) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?)";        $sqlParam = array(            $this->articleCatId,            $this->title,            $this->desc,            $this->indexImg,            $this->content,            $this->addTime,            $this->sort,            $this->isDeleted,);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:删除记录的方法，不进回收站，直接删数据库的记录     */    public function deleteOne() : array     {        $sql = "DELETE FROM ".self::$table." WHERE `id` = ?";        $sqlParam = array($this->id);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据articleCatId获取一条不在回收站内的数据     */    public static function getOneUndeletedByArticlecatid($articleCatId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND articleCatId = ?  order by sort desc limit 0,1";        $sqlParam = array($articleCatId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据articleCatId获取一条在回收站内的数据     */    public static function getOneDeletedByArticlecatid($articleCatId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND articleCatId = ?  order by sort desc limit 0,1";        $sqlParam = array($articleCatId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:IN查询，根据articleCatId获取不在回收站内的数据     */    public static function getAllUndeletedByArticlecatidUseIn($articleCatIdValues) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND find_in_set (`articleCatId`,'$articleCatIdValues ') order by sort desc";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据articleCatId不带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByArticlecatidWithOutLimit($articleCatId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND articleCatId = ?  order by sort desc ";        $sqlParam = array($articleCatId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据articleCatId带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByArticlecatidWithLimit($articleCatId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND articleCatId = ? order by sort desc ".$limit;        $sqlParam = array($articleCatId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据articleCatId不带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByArticlecatidWithOutLimit($articleCatId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND articleCatId = ? order by sort desc ";        $sqlParam = array($articleCatId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据articleCatId带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByArticlecatidWithLimit($articleCatId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND articleCatId = ? order by sort desc ".$limit;        $sqlParam = array($articleCatId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据ID获取一条记录     */    public static function getOneById($id) : array    {        assert(is_numeric($id) && $id > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `id` = ? AND isDeleted = 0";        $sqlParam = array($id);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:IN查询，根据ID获取所有的记录     */    public static function getAllUndeletedByIdUseIn($ids) : array    {        assert($ids != "");        $sql = "SELECT * FROM ".self::$table." WHERE find_in_set(`id`, '$ids') AND isDeleted = 0";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据ID获取一条没被删除的记录     */    public static function getOneByIdForUpdate($id) : array    {        assert(is_numeric($id) && $id > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `id` = ? AND isDeleted = 0 FOR UPDATE";        $sqlParam = array($id);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:删除记录的方法，进回收站，不是直接删数据库的记录     */    public function deleteUpdateOne() : array    {        $sql = "UPDATE ".self::$table." SET `isDeleted` = 1 WHERE `id` = ?";        $sqlParam = array($this->id);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:编辑排序功能     */    public function editOneSort() : array    {        $sql = "UPDATE ".self::$table." SET `sort` = ? WHERE `id` = ?";        $sqlParam = array($this->sort, $this->id);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedWithOutLimit() : array    {        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 order by sort desc ";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedWithLimit($limit) : array    {        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0  order by sort desc ".$limit;        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:不带limit的获取所有的被删除的数据     */    public static function getAllDeletedWithOutLimit() : array    {        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 order by sort desc ";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:带limit的获取所有的被删除的数据     */    public static function getAllDeletedWithLimit($limit) : array    {        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 order by sort desc ".$limit;        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:编辑一条记录     */    public function editOne() : array    {        assert(isset($this->articleCatId) && is_numeric($this->articleCatId) && $this->articleCatId >= 0);        assert(isset($this->title) && $this->title != '' );        assert(isset($this->desc) && $this->desc != '' );        assert(isset($this->indexImg) && $this->indexImg != '' );        assert(isset($this->content) && $this->content != '' );        assert(isset($this->sort) && is_numeric($this->sort) && $this->sort >= 0);        assert(isset($this->isDeleted) && is_numeric($this->isDeleted) && $this->isDeleted >= 0);        $sql = "UPDATE ".self::$table." SET `articleCatId` = ?,`title` = ?,`desc` = ?,`indexImg` = ?,`content` = ?,`sort` = ?,`isDeleted` = ? WHERE `id` = ? ";        $sqlParam = array(            $this->articleCatId,            $this->title,            $this->desc,            $this->indexImg,            $this->content,            $this->sort,            $this->isDeleted,            $this->id        );        return self::query($sql, $sqlParam, false);    }}