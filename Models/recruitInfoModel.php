<?php namespace Models;use Libs\CObject;class recruitInfoModel extends CObject{    static $table = "recruitInfo";     /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:新增一条记录     */    public function addOne() : array     {        assert(isset($this->typeId) && is_numeric($this->typeId) && $this->typeId >= 0);        assert(isset($this->areaId) && is_numeric($this->areaId) && $this->areaId >= 0);        assert(isset($this->zhiweiId) && is_numeric($this->zhiweiId) && $this->zhiweiId >= 0);        assert(isset($this->recruitName) && $this->recruitName != '' );        assert(isset($this->position) && $this->position != '' );        assert(isset($this->education) && $this->education != '' );        assert(isset($this->experience) && $this->experience != '' );        assert(isset($this->treatment) && $this->treatment != '' );        assert(isset($this->addTime) && $this->addTime != '' );        assert(isset($this->detail) && $this->detail != '' );        assert(isset($this->isDeleted) && is_numeric($this->isDeleted) && $this->isDeleted >= 0);        $sql = "INSERT INTO ".self::$table." (`typeId`,`areaId`,`zhiweiId`,`recruitName`,`position`,`education`,`experience`,`treatment`,`addTime`,`detail`,`isDeleted`) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";        $sqlParam = array(            $this->typeId,            $this->areaId,            $this->zhiweiId,            $this->recruitName,            $this->position,            $this->education,            $this->experience,            $this->treatment,            $this->addTime,            $this->detail,            $this->isDeleted,);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:删除记录的方法，不进回收站，直接删数据库的记录     */    public function deleteOne() : array     {        $sql = "DELETE FROM ".self::$table." WHERE `id` = ?";        $sqlParam = array($this->id);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据typeId获取一条不在回收站内的数据     */    public static function getOneUndeletedByTypeid($typeId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND typeId = ?  order by id desc limit 0,1";        $sqlParam = array($typeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据typeId获取一条在回收站内的数据     */    public static function getOneDeletedByTypeid($typeId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND typeId = ?  order by id desc limit 0,1";        $sqlParam = array($typeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:IN查询，根据typeId获取不在回收站内的数据     */    public static function getAllUndeletedByTypeidUseIn($typeIdValues) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND find_in_set (`typeId`,'$typeIdValues ') order by id desc";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据typeId不带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByTypeidWithOutLimit($typeId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND typeId = ?  order by id desc ";        $sqlParam = array($typeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据typeId带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByTypeidWithLimit($typeId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND typeId = ? order by id desc ".$limit;        $sqlParam = array($typeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据typeId不带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByTypeidWithOutLimit($typeId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND typeId = ? order by id desc ";        $sqlParam = array($typeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据typeId带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByTypeidWithLimit($typeId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND typeId = ? order by id desc ".$limit;        $sqlParam = array($typeId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据areaId获取一条不在回收站内的数据     */    public static function getOneUndeletedByAreaid($areaId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND areaId = ?  order by id desc limit 0,1";        $sqlParam = array($areaId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据areaId获取一条在回收站内的数据     */    public static function getOneDeletedByAreaid($areaId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND areaId = ?  order by id desc limit 0,1";        $sqlParam = array($areaId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:IN查询，根据areaId获取不在回收站内的数据     */    public static function getAllUndeletedByAreaidUseIn($areaIdValues) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND find_in_set (`areaId`,'$areaIdValues ') order by id desc";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据areaId不带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByAreaidWithOutLimit($areaId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND areaId = ?  order by id desc ";        $sqlParam = array($areaId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据areaId带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByAreaidWithLimit($areaId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND areaId = ? order by id desc ".$limit;        $sqlParam = array($areaId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据areaId不带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByAreaidWithOutLimit($areaId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND areaId = ? order by id desc ";        $sqlParam = array($areaId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据areaId带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByAreaidWithLimit($areaId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND areaId = ? order by id desc ".$limit;        $sqlParam = array($areaId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据zhiweiId获取一条不在回收站内的数据     */    public static function getOneUndeletedByZhiweiid($zhiweiId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND zhiweiId = ?  order by id desc limit 0,1";        $sqlParam = array($zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据zhiweiId获取一条在回收站内的数据     */    public static function getOneDeletedByZhiweiid($zhiweiId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND zhiweiId = ?  order by id desc limit 0,1";        $sqlParam = array($zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:IN查询，根据zhiweiId获取不在回收站内的数据     */    public static function getAllUndeletedByZhiweiidUseIn($zhiweiIdValues) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND find_in_set (`zhiweiId`,'$zhiweiIdValues ') order by id desc";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据zhiweiId不带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByZhiweiidWithOutLimit($zhiweiId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND zhiweiId = ?  order by id desc ";        $sqlParam = array($zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据zhiweiId带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByZhiweiidWithLimit($zhiweiId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND zhiweiId = ? order by id desc ".$limit;        $sqlParam = array($zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据zhiweiId不带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByZhiweiidWithOutLimit($zhiweiId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND zhiweiId = ? order by id desc ";        $sqlParam = array($zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据zhiweiId带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByZhiweiidWithLimit($zhiweiId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND zhiweiId = ? order by id desc ".$limit;        $sqlParam = array($zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $areaId获取一条没被删除的数据     */    public static function getOneUndeletedByTypeidAndAreaid($typeId, $areaId) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($areaId) && $areaId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND typeId = ? AND areaId = ? order by id desc limit 0,1";        $sqlParam = array($typeId, $areaId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $areaId获取一条被删除的数据     */    public static function getOneDeletedByTypeidAndAreaid($typeId, $areaId) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($areaId) && $areaId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND typeId = ? AND areaId = ? order by id desc limit 0,1";        $sqlParam = array($typeId, $areaId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $areaId不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByTypeidAndAreaidWithOutLimit($typeId, $areaId) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($areaId) && $areaId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND typeId = ? AND areaId = ? order by id desc ";        $sqlParam = array($typeId, $areaId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $areaId不带limit的获取所有的被删除的数据     */    public static function getAllDeletedByTypeidAndAreaidWithOutLimit($typeId, $areaId) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($areaId) && $areaId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND typeId = ? AND areaId = ? order by id desc ";        $sqlParam = array($typeId, $areaId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $areaId带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByTypeidAndAreaidWithLimit($typeId, $areaId, $limit) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($areaId) && $areaId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND typeId = ? AND areaId = ? order by id desc ".$limit;        $sqlParam = array($typeId, $areaId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $areaId带limit的获取所有的被删除的数据     */    public static function getAllDeletedByTypeidAndAreaidWithLimit($typeId, $areaId, $limit) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($areaId) && $areaId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND typeId = ? AND areaId = ? order by id desc ".$limit;        $sqlParam = array($typeId, $areaId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $zhiweiId获取一条没被删除的数据     */    public static function getOneUndeletedByTypeidAndZhiweiid($typeId, $zhiweiId) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND typeId = ? AND zhiweiId = ? order by id desc limit 0,1";        $sqlParam = array($typeId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $zhiweiId获取一条被删除的数据     */    public static function getOneDeletedByTypeidAndZhiweiid($typeId, $zhiweiId) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND typeId = ? AND zhiweiId = ? order by id desc limit 0,1";        $sqlParam = array($typeId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $zhiweiId不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByTypeidAndZhiweiidWithOutLimit($typeId, $zhiweiId) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND typeId = ? AND zhiweiId = ? order by id desc ";        $sqlParam = array($typeId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $zhiweiId不带limit的获取所有的被删除的数据     */    public static function getAllDeletedByTypeidAndZhiweiidWithOutLimit($typeId, $zhiweiId) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND typeId = ? AND zhiweiId = ? order by id desc ";        $sqlParam = array($typeId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $zhiweiId带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByTypeidAndZhiweiidWithLimit($typeId, $zhiweiId, $limit) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND typeId = ? AND zhiweiId = ? order by id desc ".$limit;        $sqlParam = array($typeId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $zhiweiId带limit的获取所有的被删除的数据     */    public static function getAllDeletedByTypeidAndZhiweiidWithLimit($typeId, $zhiweiId, $limit) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND typeId = ? AND zhiweiId = ? order by id desc ".$limit;        $sqlParam = array($typeId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$areaId, $zhiweiId获取一条没被删除的数据     */    public static function getOneUndeletedByAreaidAndZhiweiid($areaId, $zhiweiId) : array    {        assert(is_numeric($areaId) && $areaId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND areaId = ? AND zhiweiId = ? order by id desc limit 0,1";        $sqlParam = array($areaId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$areaId, $zhiweiId获取一条被删除的数据     */    public static function getOneDeletedByAreaidAndZhiweiid($areaId, $zhiweiId) : array    {        assert(is_numeric($areaId) && $areaId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND areaId = ? AND zhiweiId = ? order by id desc limit 0,1";        $sqlParam = array($areaId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$areaId, $zhiweiId不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByAreaidAndZhiweiidWithOutLimit($areaId, $zhiweiId) : array    {        assert(is_numeric($areaId) && $areaId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND areaId = ? AND zhiweiId = ? order by id desc ";        $sqlParam = array($areaId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$areaId, $zhiweiId不带limit的获取所有的被删除的数据     */    public static function getAllDeletedByAreaidAndZhiweiidWithOutLimit($areaId, $zhiweiId) : array    {        assert(is_numeric($areaId) && $areaId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND areaId = ? AND zhiweiId = ? order by id desc ";        $sqlParam = array($areaId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$areaId, $zhiweiId带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByAreaidAndZhiweiidWithLimit($areaId, $zhiweiId, $limit) : array    {        assert(is_numeric($areaId) && $areaId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND areaId = ? AND zhiweiId = ? order by id desc ".$limit;        $sqlParam = array($areaId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$areaId, $zhiweiId带limit的获取所有的被删除的数据     */    public static function getAllDeletedByAreaidAndZhiweiidWithLimit($areaId, $zhiweiId, $limit) : array    {        assert(is_numeric($areaId) && $areaId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND areaId = ? AND zhiweiId = ? order by id desc ".$limit;        $sqlParam = array($areaId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $areaId, $zhiweiId获取一条没被删除的数据     */    public static function getOneUndeletedByTypeidAndAreaidAndZhiweiid($typeId, $areaId, $zhiweiId) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($areaId) && $areaId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND typeId = ? AND areaId = ? AND zhiweiId = ? order by id desc limit 0,1";        $sqlParam = array($typeId, $areaId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $areaId, $zhiweiId获取一条被删除的数据     */    public static function getOneDeletedByTypeidAndAreaidAndZhiweiid($typeId, $areaId, $zhiweiId) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($areaId) && $areaId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND typeId = ? AND areaId = ? AND zhiweiId = ? order by id desc limit 0,1";        $sqlParam = array($typeId, $areaId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $areaId, $zhiweiId不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByTypeidAndAreaidAndZhiweiidWithOutLimit($typeId, $areaId, $zhiweiId) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($areaId) && $areaId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND typeId = ? AND areaId = ? AND zhiweiId = ? order by id desc ";        $sqlParam = array($typeId, $areaId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $areaId, $zhiweiId不带limit的获取所有的被删除的数据     */    public static function getAllDeletedByTypeidAndAreaidAndZhiweiidWithOutLimit($typeId, $areaId, $zhiweiId) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($areaId) && $areaId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND typeId = ? AND areaId = ? AND zhiweiId = ? order by id desc ";        $sqlParam = array($typeId, $areaId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $areaId, $zhiweiId带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByTypeidAndAreaidAndZhiweiidWithLimit($typeId, $areaId, $zhiweiId, $limit) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($areaId) && $areaId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND typeId = ? AND areaId = ? AND zhiweiId = ? order by id desc ".$limit;        $sqlParam = array($typeId, $areaId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$typeId, $areaId, $zhiweiId带limit的获取所有的被删除的数据     */    public static function getAllDeletedByTypeidAndAreaidAndZhiweiidWithLimit($typeId, $areaId, $zhiweiId, $limit) : array    {        assert(is_numeric($typeId) && $typeId > 0);        assert(is_numeric($areaId) && $areaId > 0);        assert(is_numeric($zhiweiId) && $zhiweiId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND typeId = ? AND areaId = ? AND zhiweiId = ? order by id desc ".$limit;        $sqlParam = array($typeId, $areaId, $zhiweiId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据ID获取一条记录     */    public static function getOneById($id) : array    {        assert(is_numeric($id) && $id > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `id` = ? AND isDeleted = 0";        $sqlParam = array($id);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:IN查询，根据ID获取所有的记录     */    public static function getAllUndeletedByIdUseIn($ids) : array    {        assert($ids != "");        $sql = "SELECT * FROM ".self::$table." WHERE find_in_set(`id`, '$ids') AND isDeleted = 0";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据ID获取一条没被删除的记录     */    public static function getOneByIdForUpdate($id) : array    {        assert(is_numeric($id) && $id > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `id` = ? AND isDeleted = 0 FOR UPDATE";        $sqlParam = array($id);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:删除记录的方法，进回收站，不是直接删数据库的记录     */    public function deleteUpdateOne() : array    {        $sql = "UPDATE ".self::$table." SET `isDeleted` = 1 WHERE `id` = ?";        $sqlParam = array($this->id);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedWithOutLimit() : array    {        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 order by id desc ";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedWithLimit($limit) : array    {        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0  order by id desc ".$limit;        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:不带limit的获取所有的被删除的数据     */    public static function getAllDeletedWithOutLimit() : array    {        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 order by id desc ";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:带limit的获取所有的被删除的数据     */    public static function getAllDeletedWithLimit($limit) : array    {        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 order by id desc ".$limit;        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:编辑一条记录     */    public function editOne() : array    {        assert(isset($this->typeId) && is_numeric($this->typeId) && $this->typeId >= 0);        assert(isset($this->areaId) && is_numeric($this->areaId) && $this->areaId >= 0);        assert(isset($this->zhiweiId) && is_numeric($this->zhiweiId) && $this->zhiweiId >= 0);        assert(isset($this->recruitName) && $this->recruitName != '' );        assert(isset($this->position) && $this->position != '' );        assert(isset($this->education) && $this->education != '' );        assert(isset($this->experience) && $this->experience != '' );        assert(isset($this->treatment) && $this->treatment != '' );        assert(isset($this->detail) && $this->detail != '' );        assert(isset($this->isDeleted) && is_numeric($this->isDeleted) && $this->isDeleted >= 0);        $sql = "UPDATE ".self::$table." SET `typeId` = ?,`areaId` = ?,`zhiweiId` = ?,`recruitName` = ?,`position` = ?,`education` = ?,`experience` = ?,`treatment` = ?,`detail` = ?,`isDeleted` = ? WHERE `id` = ? ";        $sqlParam = array(            $this->typeId,            $this->areaId,            $this->zhiweiId,            $this->recruitName,            $this->position,            $this->education,            $this->experience,            $this->treatment,            $this->detail,            $this->isDeleted,            $this->id        );        return self::query($sql, $sqlParam, false);    }}