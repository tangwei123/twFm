<?php namespace Models;use Libs\CObject;class userCollectionModel extends CObject{    static $table = "userCollection";     /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:新增一条记录     */    public function addOne() : array     {        assert(isset($this->recruitId) && is_numeric($this->recruitId) && $this->recruitId >= 0);        assert(isset($this->userId) && is_numeric($this->userId) && $this->userId >= 0);        assert(isset($this->addTime) && $this->addTime != '' );        assert(isset($this->isDeleted) && is_numeric($this->isDeleted) && $this->isDeleted >= 0);        $sql = "INSERT INTO ".self::$table." (`recruitId`,`userId`,`addTime`,`isDeleted`) VALUES ( ?, ?, ?, ?)";        $sqlParam = array(            $this->recruitId,            $this->userId,            $this->addTime,            $this->isDeleted,);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:删除记录的方法，不进回收站，直接删数据库的记录     */    public function deleteOne() : array     {        $sql = "DELETE FROM ".self::$table." WHERE `id` = ?";        $sqlParam = array($this->id);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据recruitId获取一条不在回收站内的数据     */    public static function getOneUndeletedByRecruitid($recruitId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND recruitId = ?  order by id desc limit 0,1";        $sqlParam = array($recruitId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据recruitId获取一条在回收站内的数据     */    public static function getOneDeletedByRecruitid($recruitId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND recruitId = ?  order by id desc limit 0,1";        $sqlParam = array($recruitId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:IN查询，根据recruitId获取不在回收站内的数据     */    public static function getAllUndeletedByRecruitidUseIn($recruitIdValues) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND find_in_set (`recruitId`,'$recruitIdValues ') order by id desc";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据recruitId不带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByRecruitidWithOutLimit($recruitId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND recruitId = ?  order by id desc ";        $sqlParam = array($recruitId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据recruitId带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByRecruitidWithLimit($recruitId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND recruitId = ? order by id desc ".$limit;        $sqlParam = array($recruitId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据recruitId不带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByRecruitidWithOutLimit($recruitId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND recruitId = ? order by id desc ";        $sqlParam = array($recruitId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据recruitId带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByRecruitidWithLimit($recruitId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND recruitId = ? order by id desc ".$limit;        $sqlParam = array($recruitId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据userId获取一条不在回收站内的数据     */    public static function getOneUndeletedByUserid($userId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND userId = ?  order by id desc limit 0,1";        $sqlParam = array($userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据userId获取一条在回收站内的数据     */    public static function getOneDeletedByUserid($userId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND userId = ?  order by id desc limit 0,1";        $sqlParam = array($userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:IN查询，根据userId获取不在回收站内的数据     */    public static function getAllUndeletedByUseridUseIn($userIdValues) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND find_in_set (`userId`,'$userIdValues ') order by id desc";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据userId不带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByUseridWithOutLimit($userId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND userId = ?  order by id desc ";        $sqlParam = array($userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据userId带分页获取所有的不在回收站内的数据     */    public static function getAllUndeletedByUseridWithLimit($userId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 0 AND userId = ? order by id desc ".$limit;        $sqlParam = array($userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据userId不带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByUseridWithOutLimit($userId) : array    {        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND userId = ? order by id desc ";        $sqlParam = array($userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据userId带分页获取所有的在回收站内的数据     */    public static function getAllDeletedByUseridWithLimit($userId, $limit) : array    {        assert($limit = "");        $sql = " SELECT * from ".self::$table." WHERE `isDeleted` = 1 AND userId = ? order by id desc ".$limit;        $sqlParam = array($userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$recruitId, $userId获取一条没被删除的数据     */    public static function getOneUndeletedByRecruitidAndUserid($recruitId, $userId) : array    {        assert(is_numeric($recruitId) && $recruitId > 0);        assert(is_numeric($userId) && $userId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND recruitId = ? AND userId = ? order by id desc limit 0,1";        $sqlParam = array($recruitId, $userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$recruitId, $userId获取一条被删除的数据     */    public static function getOneDeletedByRecruitidAndUserid($recruitId, $userId) : array    {        assert(is_numeric($recruitId) && $recruitId > 0);        assert(is_numeric($userId) && $userId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND recruitId = ? AND userId = ? order by id desc limit 0,1";        $sqlParam = array($recruitId, $userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$recruitId, $userId不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByRecruitidAndUseridWithOutLimit($recruitId, $userId) : array    {        assert(is_numeric($recruitId) && $recruitId > 0);        assert(is_numeric($userId) && $userId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND recruitId = ? AND userId = ? order by id desc ";        $sqlParam = array($recruitId, $userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$recruitId, $userId不带limit的获取所有的被删除的数据     */    public static function getAllDeletedByRecruitidAndUseridWithOutLimit($recruitId, $userId) : array    {        assert(is_numeric($recruitId) && $recruitId > 0);        assert(is_numeric($userId) && $userId > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND recruitId = ? AND userId = ? order by id desc ";        $sqlParam = array($recruitId, $userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$recruitId, $userId带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedByRecruitidAndUseridWithLimit($recruitId, $userId, $limit) : array    {        assert(is_numeric($recruitId) && $recruitId > 0);        assert(is_numeric($userId) && $userId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 AND recruitId = ? AND userId = ? order by id desc ".$limit;        $sqlParam = array($recruitId, $userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据$recruitId, $userId带limit的获取所有的被删除的数据     */    public static function getAllDeletedByRecruitidAndUseridWithLimit($recruitId, $userId, $limit) : array    {        assert(is_numeric($recruitId) && $recruitId > 0);        assert(is_numeric($userId) && $userId > 0);        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 AND recruitId = ? AND userId = ? order by id desc ".$limit;        $sqlParam = array($recruitId, $userId);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据ID获取一条记录     */    public static function getOneById($id) : array    {        assert(is_numeric($id) && $id > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `id` = ? AND isDeleted = 0";        $sqlParam = array($id);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:IN查询，根据ID获取所有的记录     */    public static function getAllUndeletedByIdUseIn($ids) : array    {        assert($ids != "");        $sql = "SELECT * FROM ".self::$table." WHERE find_in_set(`id`, '$ids') AND isDeleted = 0";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:根据ID获取一条没被删除的记录     */    public static function getOneByIdForUpdate($id) : array    {        assert(is_numeric($id) && $id > 0);        $sql = "SELECT * FROM ".self::$table." WHERE `id` = ? AND isDeleted = 0 FOR UPDATE";        $sqlParam = array($id);        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:删除记录的方法，进回收站，不是直接删数据库的记录     */    public function deleteUpdateOne() : array    {        $sql = "UPDATE ".self::$table." SET `isDeleted` = 1 WHERE `id` = ?";        $sqlParam = array($this->id);        return self::query($sql, $sqlParam, false);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:不带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedWithOutLimit() : array    {        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0 order by id desc ";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:带limit的获取所有的没被删除的数据     */    public static function getAllUndeletedWithLimit($limit) : array    {        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 0  order by id desc ".$limit;        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:不带limit的获取所有的被删除的数据     */    public static function getAllDeletedWithOutLimit() : array    {        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 order by id desc ";        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:带limit的获取所有的被删除的数据     */    public static function getAllDeletedWithLimit($limit) : array    {        assert($limit != "");        $sql = "SELECT * FROM ".self::$table." WHERE `isDeleted` = 1 order by id desc ".$limit;        $sqlParam = array();        return self::query($sql, $sqlParam, true);    }    /**     * User: tangwei     * Date: 2019.03.26     * @param      * @return     * Function:编辑一条记录     */    public function editOne() : array    {        assert(isset($this->recruitId) && is_numeric($this->recruitId) && $this->recruitId >= 0);        assert(isset($this->userId) && is_numeric($this->userId) && $this->userId >= 0);        assert(isset($this->isDeleted) && is_numeric($this->isDeleted) && $this->isDeleted >= 0);        $sql = "UPDATE ".self::$table." SET `recruitId` = ?,`userId` = ?,`isDeleted` = ? WHERE `id` = ? ";        $sqlParam = array(            $this->recruitId,            $this->userId,            $this->isDeleted,            $this->id        );        return self::query($sql, $sqlParam, false);    }}